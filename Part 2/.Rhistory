flight_data_raw <- ontime_db %>%
select(
year, month, dayofweek,
carrier, origin, dest,
sched_dep_time, sched_arr_time,
distance, diverted
) %>%
filter(!is.na(diverted)) %>% #remove missing diverted
collect()
library(dplyr)
library(rstudioapi)
library(knitr)
library(skimr)
library(mlr3)
library(mlr3learners)
library(mlr3pipelines)
library(mlr3tuning)
library(paradox)
library(mlr3viz)
library(ggplot2)
library(ranger)
library(xgboost)
library(e1071)
library(precrec)
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(dplyr)
library(DBI)
library(lubridate) #better for handling time and changing the format
library(knitr) #create the tables
library(kableExtra)
library(patchwork)
library(broom)
library(mlr3)
library(mlr3learners)
library(mlr3pipelines)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #ensures im on the right directory
# Connect to database (create if doesn't exist)
conn <- dbConnect(RSQLite::SQLite(), "airlines.db")
# If database is empty (e.g., no tables), populate it
if (length(dbListTables(conn)) == 0) {
# Reading CSVs
ontime_2004 <- read.csv("2004.csv", header = TRUE)
ontime_2005 <- read.csv("2005.csv", header = TRUE)
ontime_2006 <- read.csv("2006.csv", header = TRUE)
ontime_2007 <- read.csv("2007.csv", header = TRUE)
ontime_2008 <- read.csv("2008.csv", header = TRUE)
airports    <- read.csv("airports.csv", header = TRUE)
carriers    <- read.csv("carriers.csv", header = TRUE)
planes      <- read.csv("plane-data.csv", header = TRUE)
# function to make columns lowercase
to_lowercase_names <- function(df) {
names(df) <- tolower(names(df))
return(df)
}
ontime_2004 <- tolower(ontime_2004)
ontime_2005 <- to_lowercase_names(ontime_2005)
ontime_2006 <- to_lowercase_names(ontime_2006)
ontime_2007 <- to_lowercase_names(ontime_2007)
ontime_2008 <- to_lowercase_names(ontime_2008)
airports    <- to_lowercase_names(airports)
carriers    <- to_lowercase_names(carriers)
planes      <- to_lowercase_names(planes)
# Combine years into one big dataframe to then write onto database
combine_ontimes <- bind_rows(ontime_2004, ontime_2005, ontime_2006, ontime_2007, ontime_2008)
# Write tables to the database
dbWriteTable(conn, "ontime", combine_ontimes)
dbWriteTable(conn, "airports", airports)
dbWriteTable(conn, "carriers", carriers)
dbWriteTable(conn, "planes", planes)
}
# Create dplyr table references
ontime_db   <- tbl(conn, "ontime")
airports_db <- tbl(conn, "airports")
carriers_db <- tbl(conn, "carriers")
planes_db   <- tbl(conn, "planes")
flight_data_raw <- ontime_db %>%
select(
year, month, dayofweek,
carrier, origin, dest,
sched_dep_time, sched_arr_time,
distance, diverted
) %>%
filter(!is.na(diverted)) %>% #remove missing diverted
collect()
flight_data_raw <- ontime_db %>%
select(
year, month, dayofweek,
origin, dest,
sched_dep_time, sched_arr_time,
distance, diverted
) %>%
filter(!is.na(diverted)) %>% #remove missing diverted
collect()
flight_data_raw <- ontime_db %>%
select(
year, month, dayofweek,
origin, dest,
crsdeptime, crsarrtime,
distance, diverted
) %>%
filter(!is.na(diverted)) %>% #remove missing diverted
collect()
flight_data_raw <- ontime_db %>%
select(
year, month, dayofweek,
origin, dest,
crsdeptime, crsarrtime,
distance, diverted
) %>%
filter(!is.na(diverted)) %>% #remove missing diverted
collect()
flight_data <- flight_data_raw %>%
mutate(
diverted_bin = ifelse(diverted == 1, 1, 0), #make it as a bin
sched_dep_hour = floor(crsdeptime / 100), #format of hour
sched_arr_hour = floor(crsarrtime / 100)
) %>%
select(-diverted, -sched_dep_time, -sched_arr_time)
flight_data <- flight_data_raw %>%
mutate(
diverted_bin = ifelse(diverted == 1, 1, 0), #make it as a bin
sched_dep_hour = floor(crsdeptime / 100), #format of hour
sched_arr_hour = floor(crsarrtime / 100)
) %>%
select(-diverted, -crsdeptime, -crsarrtime)
airports <- airports_db %>%
collect()
#rename before joing to make sure everything is correct and ready to join dependidng on arrival and destination
airports_origin <- airports %>%
select(origin = iata, origin_lat = lat, origin_lon = lon)
#rename before joing to make sure everything is correct and ready to join dependidng on arrival and destination
airports_origin <- airports %>%
select(origin = iata, origin_lat = lat, origin_lon = long)
airports_dest <- airports %>%
select(dest = iata, dest_lat = lat, dest_lon = long)
# Merge both
flight_data <- flight_data %>%
left_join(airports_origin, by = "origin") %>%
left_join(airports_dest, by = "dest")
set.seed(123) #not random - always the same
# preprocessing and learner pipeline
pipe <- po("removeconstants") %>>%
po("imputemean") %>>%
po("encode", method = "one-hot") %>>%
po("scale")
graph <- pipe %>>% lrn("classif.log_reg", predict_type = "prob") #only logistic
graph_learner <- GraphLearner$new(graph)
#results go here
results <- list()
#loop for every year
for (yr in unique(flight_data$year)) {
df_year <- flight_data %>% filter(year == yr)
# at least two "bins"
if (length(unique(df_year$diverted_bin)) < 2) next
task <- TaskClassif$new(
id = paste0("diverted_", yr),
backend = df_year,
target = "diverted_bin",
positive = "1"
)
rr <- resample(task, graph_learner, rsmp("cv", folds = 5))
results[[as.character(yr)]] <- rr$aggregate(msr("classif.auc"))
}
flight_data <- flight_data %>%
mutate(diverted_bin = factor(diverted_bin, levels = c(0, 1)))
#loop for every year
for (yr in unique(flight_data$year)) {
df_year <- flight_data %>% filter(year == yr)
# at least two "bins"
if (length(unique(df_year$diverted_bin)) < 2) next
task <- TaskClassif$new(
id = paste0("diverted_", yr),
backend = df_year,
target = "diverted_bin",
positive = "1"
)
rr <- resample(task, graph_learner, rsmp("cv", folds = 5))
results[[as.character(yr)]] <- rr$aggregate(msr("classif.auc"))
}
flight_data_small <- flight_data %>%
filter(year == 2004) %>%
mutate(
carrier = fct_lump_min(carrier, min = 500),
origin = fct_lump_min(origin, min = 1000),
dest = fct_lump_min(dest, min = 1000)
) %>%
select(
diverted_bin, month, dayofweek, sched_dep_hour, sched_arr_hour,
distance, carrier, origin, dest, origin_lat, origin_lon, dest_lat, dest_lon
) %>%
filter(!is.na(diverted_bin))
flight_data_small <- flight_data %>%
filter(year == 2004) %>%
mutate(
origin = fct_lump_min(origin, min = 1000),
dest = fct_lump_min(dest, min = 1000)
) %>%
select(
diverted_bin, month, dayofweek, sched_dep_hour, sched_arr_hour,
distance, carrier, origin, dest, origin_lat, origin_lon, dest_lat, dest_lon
) %>%
filter(!is.na(diverted_bin))
flight_data_small <- flight_data %>%
filter(year == 2004) %>%
select(
diverted_bin, month, dayofweek, sched_dep_hour, sched_arr_hour,
distance, carrier, origin, dest, origin_lat, origin_lon, dest_lat, dest_lon
) %>%
filter(!is.na(diverted_bin))
flight_data_small <- flight_data %>%
filter(year == 2004) %>%
select(
diverted_bin, month, dayofweek, sched_dep_hour, sched_arr_hour,
distance, origin, dest, origin_lat, origin_lon, dest_lat, dest_lon
) %>%
filter(!is.na(diverted_bin))
#classification task
task <- TaskClassif$new(
id = "diverted_2004",
backend = flight_data_small,
target = "diverted_bin",
positive = "Yes"
)
